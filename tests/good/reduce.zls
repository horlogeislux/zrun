(* let f h g x = h g x + 1

let g x returns o
  let static m = f (fun g y -> g y) (fun x -> x + 1) 1 in
  if m = 3 then do o = 1 done else do o = 2 done
*)

let static rec r1<<n>>(y) returns (o)
  if n = 0 then do o = y+2 done
  else do o = r1<<n-1>>(y) + 1 done

let r2 x = r1<<4>>(x)

let static r1_2 (y1) returns (o1)
  do o1 = r1_1(y) + 1 done

let static r1_1(y2) returns (o2)
  do o2 = r1_0(y2) + 1 done

let static r1_0(y3) returns (o3)
  do o3 = y done

let static x = 1 + 2

let h () returns o 
  let static m = 2 + 1 in
  if m = 0 then do o = 1 done else do o = 2 done

let h y = y

let hh () =
  let static m = h(42) in
  m

let node h0 () =
  let static m = 42 + 2 in
  m

let h1 () =
  let static m = 42 + 3 in
  m
