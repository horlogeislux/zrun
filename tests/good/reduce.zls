(* let f h g x = h g x + 1

let g x returns o
  let static m = f (fun g y -> g y) (fun x -> x + 1) 1 in
  if m = 3 then do o = 1 done else do o = 2 done
*)

let static rec r1<<n>>(y) returns (o)
  if n = 0 then do o = y done
  else do o = r1<<n-1>>(y) + 1 done

let r2 x = r1<<2>>

(*
let static x = 1 + 2

let h () returns o 
  let static m = 2 + 1 in
  if m = 0 then do o = 1 done else do o = 2 done

let h y = y

let hh () =
  let static m = h(42) in
  m
*)

(* let node h0 () =
  let static m = 42 + 1 in
  m

let h1 () =
  let static m = 42 + 1 in
  m *)
